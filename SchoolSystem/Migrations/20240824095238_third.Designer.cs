// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolSystem.General;

#nullable disable

namespace SchoolSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240824095238_third")]
    partial class third
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolSystem.Models.Attendance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("attendant")
                        .HasColumnType("bit");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("studentId");

                    b.ToTable("attendances", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("academicYear")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("groupId");

                    b.HasIndex("teacherId");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.Group", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("id"));

                    b.Property<int>("academicYear")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.GroupTeacher", b =>
                {
                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.HasKey("teacherId", "groupId");

                    b.HasIndex("groupId");

                    b.ToTable("groupTeachers", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("academicYear")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("groupId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.StudentCourse", b =>
                {
                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.HasKey("studentId", "courseId");

                    b.HasIndex("courseId");

                    b.ToTable("studentCourses", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.Teacher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.Attendance", b =>
                {
                    b.HasOne("SchoolSystem.Models.Course", "course")
                        .WithMany("attendances")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.Student", "student")
                        .WithMany("attendances")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("SchoolSystem.Models.Course", b =>
                {
                    b.HasOne("SchoolSystem.Models.Group", "group")
                        .WithMany("groupCourses")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.Teacher", "teacher")
                        .WithMany("courses")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("SchoolSystem.Models.GroupTeacher", b =>
                {
                    b.HasOne("SchoolSystem.Models.Group", "group")
                        .WithMany("groupTeachers")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.Teacher", "teacher")
                        .WithMany("groupTeachers")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("SchoolSystem.Models.Student", b =>
                {
                    b.HasOne("SchoolSystem.Models.Group", "group")
                        .WithMany("students")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("group");
                });

            modelBuilder.Entity("SchoolSystem.Models.StudentCourse", b =>
                {
                    b.HasOne("SchoolSystem.Models.Course", "course")
                        .WithMany("studentCourses")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.Student", "student")
                        .WithMany("studentCourses")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("SchoolSystem.Models.Course", b =>
                {
                    b.Navigation("attendances");

                    b.Navigation("studentCourses");
                });

            modelBuilder.Entity("SchoolSystem.Models.Group", b =>
                {
                    b.Navigation("groupCourses");

                    b.Navigation("groupTeachers");

                    b.Navigation("students");
                });

            modelBuilder.Entity("SchoolSystem.Models.Student", b =>
                {
                    b.Navigation("attendances");

                    b.Navigation("studentCourses");
                });

            modelBuilder.Entity("SchoolSystem.Models.Teacher", b =>
                {
                    b.Navigation("courses");

                    b.Navigation("groupTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
